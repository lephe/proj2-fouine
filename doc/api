#---
#	This is a description of the interpreter's API, organized in modules. I
#	finally decided to write my own interface files, but this listing still
#	provides the best overview of the program's structure.
#
#	There are mode modules than I wished because OCaml has a very broad and
#	unpractical notion of "circular build".
#---

Errors # Error messages and logs in terminal

	errors_try()				# Execute function, report errors in terminal

Exceptions # Exception types

	MatchError					range, pattern, value
	MultiBind					bool, range, StringSet.t
	TypeError					range, string, string
	NameError					range, string
	InvalidOperator				string
	ZeroDivision				range
	TypeOverload				range, string
	Error						range, string
	InternalError				string

Expr # Expression representation and evaluation

	expr_free()					# Get the free variables
	expr_eval()					# Evaluates an expression within an environment
	expr_eval_k()				# Continuation-style version of expr_eval()

Interpreter # The higher-level interface for program execution

	interpreter_start()			# Create a fresh execution environment
	interpreter_exec()			# Evaluate a statement within an environment

Lexer # An ocamllex-generated lexer

	(automatically generated)

Machine # A stack-based machine as a compilation target

	...

Main # Command-line parsing and main flow for non-interactive invocations

	(no interface)

Memory # Imperative-style, random-access memory for references

	memory_store()				# Store value, return address
	memory_get()				# Get pointed value
	memory_update()				# Update pointed value

Parser # A Menhir-generated LR(1) parser

	(automatically generated)

Pattern # Data patterns, for let, match, and function

	pattern_free()				# Get the set of bound variables
	pattern_unify()				# Match pattern, unify terms, bind names
	pattern_bind()				# Higher-level version of pattern_unify

Range # Sections of the source code, for error diagnostics

	range_empty					# An empty range object (placeholder)
	range_merge()				# Make a larger range that covers arguments
	range_highlight()			# Highlight a section of the source in terminal

Repr # Textual representations of objects

	repr_expr()					# Expr
	repr_memory_addr()			# Memory
	repr_pattern()				# Pattern
	repr_range()				# Range. Uses format "file:line:col"
	repr_value()				# Value
	repr_statement()			# Interpreter
	repr_program()				# Interpreter

Shell # Interactive Read-Eval-Print Loop shell

	shell_main()				# Do a REPL session

Source # Re-interpretable representations of objects

	source_expr()				# Expr
	source_statement()			# Interpreter
	source_program()			# Interpreter
	source_machine()			# Machine

Transform # Program transformations that eliminate traits

	transform_rename()			# Rename all variables to avoid conflicts
	transform_imperative()		# Remove imperative traits
	transform_continuation()	# Introduce continuations
	transform()					# Apply multiple transformations in order

Types # Type definitions and functor-generated modules

	module IntSet
	module IntMap
	module StringSet
	module StringMap

	type range
	type pattern
	type expr_tree
	type expr
	type decl
	type value
	type env
	type memory
	type memory_addr

Typing # Type inference

	(not merged with application yet)

Value # Concrete data types

	value_type()				# Get type associated with value
